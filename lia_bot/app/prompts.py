"""
Prompts simplificados para o bot de agendamento com LangChain v1.0.
"""

from langchain_core.prompts import ChatPromptTemplate
from langchain_google_genai import ChatGoogleGenerativeAI
from typing import List
from app.schemas.agendamento import MedicoSchema, HorarioSchema, AgendamentoSchema, EspecialidadeSchema


# Fun√ß√£o para obter modelo configurado
def get_model():
    """Obt√©m o modelo Google GenAI configurado."""
    import os
    from dotenv import load_dotenv
    
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise ValueError("GOOGLE_API_KEY n√£o encontrada. Configure a vari√°vel de ambiente GOOGLE_API_KEY.")
    
    return ChatGoogleGenerativeAI(
        model="gemini-2.5-flash",
        temperature=0.1,
        google_api_key=api_key
    )


def create_system_prompt() -> str:
    """Cria o prompt do sistema principal."""
    return """
    Voc√™ √© um assistente virtual especializado em agendamento de consultas m√©dicas.
    
    INSTRU√á√ïES:
    1. Seja cordial e profissional
    2. Forne√ßa informa√ß√µes claras e precisas
    3. Confirme dados antes de agendar consultas
    4. Mantenha foco em assuntos relacionados a agendamento m√©dico
    
    ESPECIALIDADES DISPON√çVEIS:
    - Cardiologia, Dermatologia, Ortopedia, Pediatria, Ginecologia, Neurologia, Psicologia, Cl√≠nica Geral
    
    FORMATOS:
    - Data: YYYY-MM-DD (ex: 2024-12-25)
    - Hor√°rio: HH:MM (ex: 14:30)
    """


def format_medicos_response(medicos: List[MedicoSchema]) -> str:
    """Formata resposta com lista de m√©dicos."""
    if not medicos:
        return "Desculpe, n√£o encontrei m√©dicos dispon√≠veis para a especialidade solicitada."
    
    medicos_text = "\n".join([
        f"‚Ä¢ ID: {m.id} | {m.nome} | {m.especialidade}"
        for m in medicos
    ])
    
    return f"M√©dicos dispon√≠veis:\n{medicos_text}"


def format_horarios_response(horarios: List[HorarioSchema]) -> str:
    """Formata resposta com lista de hor√°rios."""
    if not horarios:
        return "Desculpe, n√£o h√° hor√°rios dispon√≠veis para a data solicitada."
    
    horarios_text = "\n".join([
        f"‚Ä¢ {h.horario} - {'Dispon√≠vel' if h.disponivel else 'Ocupado'}"
        for h in horarios
    ])
    
    return f"Hor√°rios dispon√≠veis:\n{horarios_text}"


def format_agendamento_response(agendamento: AgendamentoSchema) -> str:
    """Formata resposta de confirma√ß√£o de agendamento."""
    return f"""
‚úÖ Agendamento confirmado com sucesso!

üìã Detalhes do Agendamento:
‚Ä¢ ID: {agendamento.id}
‚Ä¢ M√©dico: {agendamento.medico_nome}
‚Ä¢ Especialidade: {agendamento.especialidade}
‚Ä¢ Data: {agendamento.data}
‚Ä¢ Hor√°rio: {agendamento.horario}
‚Ä¢ Paciente: {agendamento.paciente_nome}
‚Ä¢ Telefone: {agendamento.paciente_telefone}
‚Ä¢ Status: {agendamento.status}
‚Ä¢ C√≥digo de Confirma√ß√£o: {agendamento.codigo_confirmacao}

Obrigado por escolher nossos servi√ßos!
"""


def format_especialidades_response(especialidades: List[EspecialidadeSchema]) -> str:
    """Formata resposta com lista de especialidades."""
    especialidades_text = "\n".join([
        f"‚Ä¢ {esp.nome} ({esp.quantidade_medicos} m√©dicos dispon√≠veis)"
        for esp in especialidades
    ])
    
    return f"Especialidades dispon√≠veis:\n{especialidades_text}"


def format_ajuda_response() -> str:
    """Formata resposta de ajuda."""
    return """
ü§ñ Bot de Agendamento de Consultas

üìã Funcionalidades dispon√≠veis:
‚Ä¢ Buscar m√©dicos por especialidade
‚Ä¢ Verificar hor√°rios dispon√≠veis
‚Ä¢ Agendar consultas
‚Ä¢ Cancelar agendamentos
‚Ä¢ Listar especialidades dispon√≠veis

üí° Exemplos de uso:
‚Ä¢ "Quero ver os m√©dicos de cardiologia"
‚Ä¢ "Quais hor√°rios tem o m√©dico 1 para amanh√£?"
‚Ä¢ "Quero agendar consulta com m√©dico 1, dia 25/12/2024 √†s 14:30"
‚Ä¢ "Quais especialidades voc√™s t√™m?"

Como posso ajudar voc√™ hoje?
"""


def answer_chat_interaction(message: str, chat_history: List[str] = None) -> str:
    """Gera resposta para intera√ß√µes de chat geral."""
    prompt = ChatPromptTemplate.from_messages([
        ("system", create_system_prompt()),
        ("human", "Usu√°rio: {message}")
    ])
    
    model = get_model()
    chain = prompt | model
    response = chain.invoke({"message": message})
    return response.content